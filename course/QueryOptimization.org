#+title: Query Optimization

#+AUTHOR: Thomas Neumann
#+EXPORT_FILE_NAME: ../latex/queryoptimization/queryoptimization.tex
#+LATEX_HEADER: \graphicspath{{../../books/}}
#+LATEX_HEADER: \input{../preamble.tex}
#+LATEX_HEADER: \makeindex

* Introduction
    Compile time system:
    1. parsing: parsing, AST production
    2. semantic analysis: schema lookup, variable binding, type inference
    3. normalization, factorization, constant folding
    4. rewrite 1: view resolution, unnesting, deriving predicates
    5. plan generation: constructing the execution plan
    6. rewrite 2: refining the plan, pushing group
    7. code generation: producing the imperative plan


    Different optimization goals:
    * minimize response time
    * minimize resource consumption
    * minimize time to first tuple
    * maximize throughput

    Notation:
    * \(\cala(e)\): attributes of the tuples produces by \(e\)
    * \(\calf(e)\) free variable of the expression \(e\)
    * binary operators \(e_1\theta e_2\) usually require \(\cala(e_1)=\cala(e_2)\)
    * \(\rho_{a\to b(e)}\), rename
    * \(\Pi_A(e)\), projection
    * \(\sigma_p(e)\), selection, \(\{x\mid x\in e\wedge p(x)\}\)
    * \(e_1\bowtie_pe_2\), join, \(\{x\circ y\mid x\in e_1\wedge y\in e_2\wedge p(x\circ y)\}\)

* Join Ordering

* Accessing the Data

* Physical Properties

* Query Rewriting

* Self Tuning

#+title: Advanced Set Theory

#+AUTHOR: Yang Ruizhi

#+EXPORT_FILE_NAME: ../latex/AdSetTh/AdSetTh.tex
#+LATEX_HEADER: \graphicspath{{../../books/}}
#+LATEX_HEADER: \input{../preamble.tex}
#+LATEX_HEADER: \makeindex

* Course 1
    #+ATTR_LATEX: :options []
    #+BEGIN_definition
    Fix first order language \(\call_1\), \(\call_2\) and theory \(T_1\) in \(\call_1\), theory \(T_2\) in \(\call_2\). We
    say that \(T_1\) *interpret* \(T_2\) iff there is a function \pi s.t.
    1. \(\pi(\forall)=\varphi_{\forall}(x)\) is a \(\call_1\)-formula
    2. \(\pi(\approx)=\varphi_{\approx}(x,y)\) is a \(\call_1\)-formula s.t.

       \begin{align*}
       T_1\vdash\varphi_\approx(x,y)\text{defines an equivalent relation on the set defined by }\varphi_\forall(x)
       \end{align*}
       e.g., \(\forall x\forall y(\varphi_\forall(x)\to\varphi_\forall(y))\to\varphi_\approx(x,y)\to\varphi_\approx(y,x)\)
    3. For any \(n\)-ary predicate \(P\) in \(\call_2\), \(\pi(P)=\varphi_P(x_1,\dots,x_n)\) and respects the
       equivalence relation defined by \(\varphi_\forall\)
    4. For constant \(c\) in \(\call_2\), \(\pi(c)=\varphi_c(x)\) s.t.
       \(T_1\vdash\exists x(\varphi_\forall(x)\wedge\varphi_c(x))\wedge\forall y,z(\varphi_\forall(y)\to\varphi_\forall(z)\to\varphi_c(y)\to\varphi_c(z)\to\varphi_\approx(y,z))\)
    5. For \(n\)-ary function symbol \(f\) in \(\call_2\), \(\pi(f)=\varphi_f(x_1,\dots,x_n,y)\) s.t. it's a function
       modulo \(\varphi_\approx\)


    Then we can recursively define the translation of formulas.

    For term \(t\) we define
    \begin{equation*}
    \varphi_t(x)=
    \begin{cases}
    \varphi_\approx(x,t)&t\text{ is a variable(constant) other than }x\\
    \exists y_1\dots y_n((\bigwedge_{i=1}^n\varphi_\forall(y_i)\wedge\varphi_{t_i}(y_i))\wedge\varphi_f(y_1,\dots,y_n,x))&t=ft_1\dots t_n\\
    \end{cases}
    \end{equation*}
    For formulas
    1. \((t_1\approx t_2)^*=\exists x_1x_2(\varphi_\forall(x_1)\wedge\varphi_\forall(x_2)\wedge\varphi_{t_1}(x_1)\wedge\varphi_{t_2}(x_2)\wedge\varphi_\approx(x_1,x_2))\)
    2. \((Pt_1\dots t_n)\)
    3. \((\forall x\varphi)^*=\forall x(\varphi_\forall(x)\to\varphi^*(x))\)

    For any \(\call_2\)-formula \varphi, \(T_2\vdash\varphi\Rightarrow T_1\vdash\varphi^*\)
    #+END_definition

    #+ATTR_LATEX: :options []
    #+BEGIN_fact
    If \(T_1\) interprets \(T_2\) then \(T_1\) is consistent implies \(T_2\) is consistent
    #+END_fact

    #+BEGIN_proof
    If \(T_2\) is not consistent, then \(T_1\) is not consistent
    #+END_proof

    #+ATTR_LATEX: :options [Relative consistency]
    #+BEGIN_definition
    \(T_2\) is *relative consistent* in \(T_1\) iff \(\Con(T_1)\to\Con(T_2)\)
    #+END_definition

    Usually \(T_1\) and \(T_2\) are recursively enumerable.

    #+ATTR_LATEX: :options [Consistency strength]
    #+BEGIN_definition
    Assume \(T_1\)  can interprets \(\sfQ\), \(T_2\) is r.e., we say that the *consistency strength*
    of \(T_1\) is strictly stronger than \(T_2\)  iff \(T_1\vdash\Con(T_2)\)
    #+END_definition

    #+ATTR_LATEX: :options []
    #+BEGIN_fact
    If the consistency strength of \(T_1\) is strictly stronger than \(T_2\) then \(\Con(T_1)\to\Con(T_2)\)
    #+END_fact

    #+BEGIN_proof
    If \(T_2\) is not consistent, then \(\neg\Con(T_2)\) is a true \(\Sigma_1^0\)-sentence, so \(T_1\vdash\neg\Con(T_2)\)
    #+END_proof

    ZF,ZF-foundation,
    ZF-replacement, \(V_{\omega+\omega}\)
    ZF-power set: \(\ZF\vdash V_{\omega+1}\vDash\ZF-Pow\)
    ZF-Infinite: \(\ZF\vdash V_\omega\vDash\ZF-Inf\)


    NBG is finitely axiomatizable

    class existency axioms
    1. \(\in\subset V^2\) exists
    2. If a class exists, then its complement exists
    3. intersection of class exists
    4. projection of class exists, \(\forall X\exists Y\forall z(z\in Y\leftrightarrow\exists w(z,w)\in X)\)

    #+ATTR_LATEX: :options []
    #+BEGIN_fact
    NBG is conservative over ZF, \(ZF\vdash\varphi\Leftrightarrow NBG\vdash\varphi^*\)
    #+END_fact

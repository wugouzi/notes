#+TITLE: xv6 book

#+AUTHOR: Russ Cox & Frans Kaashoek & Robert Morris

* Operating system interfaces
    As Figure 1.1 shows, xv6 takes the traditional form of a *kernel*, a special program that provides
    services to running programs. Each running program, called a *process*, has memory containing
    instructions, data, and a stack. The instructions implement the program’s computation. The data
    are the variables on which the computation acts. The stack organizes the program’s procedure
    calls. A given computer typically has many processes but only a single kernel.

    #+ATTR_LATEX: :width .5\textwidth
    #+NAME:
    #+CAPTION:
    [[../images/xv6/1.1.png]]

    When a process needs to invoke a kernel service, it invokes a *system call*, one of the calls in
    the operating system’s interface. The system call enters the kernel; the kernel performs the
    service and returns. Thus a process alternates between executing in *user space* and *kernel space*.

    The kernel uses the hardware protection mechanisms provided by a CPU1 to ensure that each
    process executing in user space can access only its own memory. The kernel executes with the
    hardware privileges required to implement these protections; user programs execute without those
    privileges. When a user program invokes a system call, the hardware raises the privilege level
    and starts executing a pre-arranged function in the kernel.

** Processes and memory

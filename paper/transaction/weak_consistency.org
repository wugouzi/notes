#+title: Weak Consistency: A Generalized Theory and Optimisitc Implementations for Distributed Transactions
#+AUTHOR:
#+LATEX_HEADER: \input{/Users/wu/notes/preamble.tex}
#+EXPORT_FILE_NAME: ../../latex/papers/transaction/weak_consistency.tex
#+LATEX_HEADER: \graphicspath{{../../../paper/transaction/}}
#+OPTIONS: toc:nil
#+STARTUP: shrink
* Introduction
** Why New Consistency Definitions are Needed
        Any set of definitions for weak consistency levels must satisfy two goals.
        1. they must be sufficiently restrictive to disallow all behavior that is considered undesirable by
           application programmers and end-users, e.g., non-serializable histories should be disallowed by the
           consistency level that provides serializability.
        2. they must also be permissive enough to allow all good behavior that is expected by applications, or
           at least all histories that can occur using some realistic concurrency control technique. In
           particular, we would like to allow both pessimistic and optimistic concurrency control approaches.

        Pessimistic schemes such as 2-phase locking require appropriate permission (e.g., read or write) to be
        obtained before an object can be accessed. On the other hand, optimistic concurrency control schemes
        allow immediate access to objects. At the end of a transaction, the database system checks for
        conflicts and, the transaction is aborted if necessary.
** Contributions: Specifying Degrees of Isolation
*** Definitions of Existing Isolation Levels
        Our levels for committed transactions are called PL-1, PL-2, and PL-3 where PL-3 is the same as
        serializability.
        #+ATTR_LATEX: :width .6\textwidth :float nil
        #+NAME: 1-1
        #+CAPTION:
        [[../../images/papers/117.png]]
*** New Isolation Levels
        Our first level, PL-2+, is the weakest level that ensures that transactions do not observe violated
        multi-object constraints. However, it allows transactions to update the database in an inconsistent
        manner. Thus, PL-2+ lies “halfway” between degrees 2 and 3 since it ensures consistent reads but
        allows inconsistent writes.
* Existing Definitions
** Degrees of Isolation
** ANSI/ISO SQL-92 Definitions
        * Dirty Read (Read Committed) - Transaction \(T_1\) modifies \(x\).  Another transaction \(T_2\) then reads \(x\)
          before \(T_1\) commits or aborts. If \(T_1\) then aborts, \(T_2\) has read a data item that was
          never committed and so vever really existed.
        * Fuzzy or Non-repeatable Read (Repeatable Read) - Transaction \(T_1\) reads \(x\) and then \(T_2\) modifies or deletes
          \(x\) and commits. If \(T_1\) then attempts to reread \(x\), it receives a modified value or
          discovers that the data has been deleted
        * Phantom (Serializable) - Transaction \(T_1\) reads a set of data items satisfying some condition. Transaction
          \(T_2\) then creates data items that satsify \(T_1\)'s condition and commits. If \(T_1\) then
          repeats its read with the same condition, it gets a set of data items different from the first read.
** Preventative Phenomena Approach

        #+CAPTION: Anomaly and Preventative Interpretations of ANSI levels
        #+NAME: 2-1
        |-------------+------------------------+-----------------------------|
        | Phenomenon  | Anomaly Interpretation | Preventative Interpretation |
        |-------------+------------------------+-----------------------------|
        | Dirty Write | None                   | \(P0:w_1(x)\dots w_2(x)\)   |
        | Dirty Read  |                        |                             |
* Proposed Specifications for Existing Isolation Levels
** System Model and Terminology
*** Database Model
        When a transaction writes an object \(x\), it creates a new version of \(x\). A transaction \(T\) can
        modify an object multiple times; its first update of object \(x\) is denoted by \(x_{i.1}\) , the
        second by \(x_{i.2}\), and so on. Version \(x_i\) denotes the final modification of \(x\) performed by
        \(T_i\) before it commits or aborts. That is,
        \begin{equation*}
        x_i\equiv x_{i.n}\text{ where }n=\max\{j\mid x_{i.j}\text{ exists}\}
        \end{equation*}
        The last operation of a transaction is a commit or abort operation to indicate whether the
        transaction’s execution was successful or not; there is at most one commit or abort operation for a
        transaction.

        An *event* is added to a transaction’s sequence of events after it has been registered by the database,
        e.g., for a read event of version \(x\) , it could mean that the database has added \(x\) to the
        transaction’s read set and returned the relevant value. Similarly, in an optimistic system, a commit
        may be requested for transaction \(T_i\) but \(T_i\) may abort; in this case, we register an abort event
        for \(T_i\) and not a commit event.

        The *database state* refers to the versions of objects that have been created by committed and
        uncommitted transactions. The committed state of the database reflects only the modifications of
        committed transactions. When transaction \(T\) commits, each version \(x_i\) created by \(T_i\)
        becomes a part of the committed state and we say that \(T_i\) installs \(x_i\) . If \(T_i\) aborts,
        \(x_i\) does not become part of the committed state. Thus, the system needs to prevent modifications
        made by uncommitted and aborted transactions from affecting the committed database state.

        Conceptually, the committed state comes into existence as a result of running a special initialization
        transaction, \(T_{init}\). Transaction \(T_{init}\) creates all objects that will ever exist in the
        database; at this point, each object \(x\) has an initial version, \(x_{init}\), called the *unborn
        version*. When an application transaction inserts an object \(x\) (e.g., inserts a tuple in a
        relation), we model it as the creation of a visible version for \(x\). When a transaction \(T_i\)
        deletes an object \(x\) (e.g., by deleting a tuple from some relation), we model it as the creation of
        a special dead version, i.e., in this case, \(x_i\) (also called \(x_{dead}\)) is a *dead version*.
        Thus, object versions can be of three kinds — *unborn*, *visible*, and *dead*


All objects in the database have a unique identity that is not based on field values. Suppose
transaction T deletes x (i.e., x is a dead version) and a later transaction T checks if this tuple
exists and inserts a new tuple. Transaction T ’s insert operation overwrites the unborn version of an
object y that has not been used before and creates a visible version of y, i.e., the deleted and inserted
* Problems


* References
<<bibliographystyle link>>
bibliographystyle:alpha

\bibliography{/Users/wu/notes/notes/references.bib}

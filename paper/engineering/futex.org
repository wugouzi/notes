#+title: Fuss, Futexes and Furwocks

#+AUTHOR: Hubertus Franke & Rusty Russel
#+LATEX_HEADER: \input{/Users/wu/notes/preamble.tex}
#+EXPORT_FILE_NAME: ../../latex/papers/engineering/futex.tex
#+LATEX_HEADER: \graphicspath{{../../../paper/engineering/}}
#+OPTIONS: toc:nil
#+STARTUP: shrink

* Requirements
        Two goals:
        1. Avoid system calls if possible, as system calls typically consume several hundred instructions
        2. Avoid unnecessary context switches: context switches lead to overhead associated with TLB
           invalidations etc.


        Hence, in fast userlevel locking, we first distinguish between the uncontended and the contended case.
        The uncontended case should be efficient and should avoid system calls by all means. In the contended
        case we are willing to perform a system call to block in the kernel.

        Avoiding system calls in the uncontended case requires a shared state in user space accessible to all
        participating processes/task. This shared state, referred to as the user lock, indicates the status of
        the lock, i.e., whether the lock is held or not and whether there are waiting tasks or not.

        The user lock is located in a shared memory region that was create via ~shmat()~ or ~mmap()~.



* Linux Fast User Level Locking: History and Implementations

* Problems


* References
<<bibliographystyle link>>
bibliographystyle:alpha

<<bibliography link>>
bibliography:/Users/wu/notes/references.bib

#+title: Logical Physical Clocks and Consistent Snapshots in Globally Distributed Databases
#+AUTHOR:
#+LATEX_HEADER: \input{/Users/wu/notes/preamble.tex}
#+EXPORT_FILE_NAME: ../../latex/papers/distributed_systems/logical_physical_clocks.tex
#+LATEX_HEADER: \graphicspath{{../../../paper/distributed_systems/}}
#+LATEX_HEADER: \DeclareMathOperator{\hb}{\textsf{hb}}
#+OPTIONS: toc:nil
#+STARTUP: shrink


* Introduction
        VC mains a vector at each node which tracks the knowledge this node has about the logical clocks of
        other nodes.

        PT leverages on physical clocks at nodes that are synchronized using the Network Time Protocol (NTP)
        While PT avoids the disadvantages of LC by using physical time for timestamping, it introduces new
        disadvantages:
        1. When the uncertainty intervals are overlapping, PT cannot order events. NTP can usually maintain
           time to within tens of milliseconds over the public Internet, and can achieve one millisecond
           accuracy in local area networks under ideal conditions, however, asymmetric routes and network
           congestion can occasionally cause errors of 100 ms or more.
        2. PT has several kinks such as leap seconds and non-monotonic updates to POSIX time which may cause
           the timestamps to go backwards.
* Preliminaries
        We use LC to denote the logical clock, and use \(lc.e\) to denote the timestamp assigned to event
        \(e\) by this algorithm.

        We use \(\hb\) to denote happens before relation, let
        \begin{equation*}
        e||f:=\neg(e\hb f)\wedge\neg(f\hb e)
        \end{equation*}
        We have
        \begin{gather*}
        e\hb f\Rightarrow lc.e<lc.f\\
        lc.e=lc.f\Rightarrow e||f\\
        e\hb f\Leftrightarrow vc.e<vc.f
        \end{gather*}

* HLC: Hybrid Logical Clocks
** Problem statement
        Given a distributed system, assign each event \(e\) a timestamp, \(l.e\), s.t.
        1. \(e\hb f\Rightarrow l.e<l.f\)
        2. Space requirement for \(l.e\) is \(O(1)\) integers
        3. \(l.e\) is represented with bounded space
        4. \(l.e.\) is *close* to \(pt.e\), i.e., \(\abs{l.e-pt.e}\) is bounded.
** Description of the Naive Algorithm
        Given the goal that \(l.e\) should be close to \(pt.e\), in the naive algorithm, we begin with the
        rule: /for any event \(e\)/, \(l.e\ge pt.e\). We design our algoirithm as shown in Figure [[ref:3]].
        #+ATTR_LATEX: :width .4\textwidth :float nil
        #+NAME: 3
        #+CAPTION: Naive HLC algoirithm for node \(j\)
        [[../../images/papers/80.png]]

        Initially all \(l\) values are set to 0. When a send event, say \(f\), is created on node \(j\), we
        set \(l.f\) to be \(\max(l.e+1,pt.j)\), where \(e\) is the previous event on node \(j\). This ensures
        \(l.e<l.f\) and \(l.f\ge pt.f\).

        The algorithm satisfies the first two requirement. Consider figure [[ref:4]] but violates the fourth
        requirement
        #+ATTR_LATEX: :width .6\textwidth :float nil
        #+NAME: 4
        #+CAPTION: Counter example
        [[../../images/papers/81.png]]

        The root of the unbounded drift problem is due to the naive algorithm using \(l\) to maintain both the
        maximum of \(pt\) values seen so far and the logical clock increments from new events (local, send,
        receive). This makes the clocks lose information: it becomes unclear if the new \(l\) value came from
        \(pt\) (as in the message from node 0 to node 1) or from causality (as is the case for the rest of
        messages).

        As such, there is no suitable place to reset l value to bound the \(l-pt\) difference.

* Problems


* References
<<bibliographystyle link>>
bibliographystyle:alpha

\bibliography{/Users/wu/notes/notes/references.bib}

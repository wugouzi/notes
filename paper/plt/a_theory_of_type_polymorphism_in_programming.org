#+title: A Theory of Type Polymorphism in Programming

#+AUTHOR: Robin Milner
#+LATEX_HEADER: \input{/Users/wu/notes/preamble.tex}
#+EXPORT_FILE_NAME: ../../latex/papers/plt/a_theory_of_type_polymorphism_in_programming.tex
#+LATEX_HEADER: \graphicspath{{../../../paper/plt/}}
#+LATEX_HEADER: \DeclareMathOperator{\llet}{\textit{let}\,}
#+LATEX_HEADER: \DeclareMathOperator{\lletrec}{\textit{letrec}\,}
#+LATEX_HEADER: \DeclareMathOperator{\iin}{\,\textit{in}\,}
#+LATEX_HEADER: \DeclareMathOperator{\iif}{\,\textit{if}\,}
#+LATEX_HEADER: \DeclareMathOperator{\eelse}{\,\textit{else}\,}
#+LATEX_HEADER: \DeclareMathOperator{\tthen}{\,\textit{then}\,}
#+LATEX_HEADER: \DeclareMathOperator{\mmap}{map}
#+LATEX_HEADER: \DeclareMathOperator{\nnull}{null}
#+LATEX_HEADER: \DeclareMathOperator{\nnil}{nil}
#+LATEX_HEADER: \DeclareMathOperator{\ccons}{cons}
#+LATEX_HEADER: \DeclareMathOperator{\llist}{\,\textit{list}}
#+LATEX_HEADER: \DeclareMathOperator{\bbool}{\textit{bool}}
#+LATEX_HEADER: \DeclareMathOperator{\iid}{\text{Id}}
#+LATEX_HEADER: \DeclareMathOperator{\eexp}{\text{Exp}}
#+LATEX_HEADER: \DeclareMathOperator{\Env}{\text{Env}}
#+OPTIONS: toc:nil
#+STARTUP: shrink


* Illustrations of the Type Discipline
        The constructs
        \begin{align*}
        &\llet x=e\iin e'\\
        &\llet f(x_1,\dots,x_n)=e\iin e'
        \end{align*}

        The fully determined types of ML are built from a set of basic types (/int/, /bool/, etc) by the binary
        indexed operators \(\times\), \(+\) (disjoint sum) and \(\to\), and the unary postfixed operator /list/.
        Polymorphic types (polytypes) are obtained by admitting *type variables*, which here are represented by
        \(\alpha,\beta,\gamma,\dots\). We represent arbitrary types by \(\rho,\sigma,\tau\).

        #+ATTR_LATEX: :options []
        #+BEGIN_examplle
Mapping a function over a list
\begin{align*}
\lletrec\mmap(f,m)=&\iif\nnull(m)\tthen\nnil\\
&\eelse\ccons(f(hd(m)),\mmap(f,tl(m)))
\end{align*}
        #+END_examplle
        So we say that map has type
        \begin{equation*}
        ((\alpha\to\beta)\times\alpha\llist)\to\beta\llist
        \end{equation*}
        where \(\alpha\),\(\beta\) are type variables

        \begin{align*}
        \nnull&:\alpha\llist\to\bbool,\\
        \nnil&:\alpha\llist,\\
        \text{hd}&:\alpha\llist\to\alpha,\\
        \text{tl}&:\alpha\llist\to\alpha\llist,\\
        \text{cons}&:(\alpha\times\alpha\llist)\to\alpha\llist
        \end{align*}


* A Simple Applicative Language and Its Types
** The Language Exp
        Let \(x\) range over identifiers, that is,
        \begin{equation*}
        x\in\iid
        \end{equation*}

        Then the expression language \(\eexp\) is generated by the following grammer
        \begin{align*}
        e::=&x\mid (ee')\mid if\;e\;then\;e'\;e''\mid\\
        &\lambda x\cdot e\mid fix\;x\cdot e\mid let\;x=e\;in\;e'
        \end{align*}
        Here \((ee')\) means pplication, \(fix\;x\cdot e\) stands for the least fixed point of
        \(\lambda x\cdot e\), and the clause binds \(x\) to the value of \(e\) throughout \(e'\). We often use
        \(d,e,f\) -with primes and suffixes - to range over \(\eexp\)

        Our semantic domains may be taken to be complete partial orders (cpos): a cpo \(D\) is a partially
        ordered set s.t.
        1. there exist a minimum element, \(\bot_D\)
        2. every directed subset (every finite subset has an upper bound) of \(D\) has a least upper bound in
           \(D\)

        The semantic function is \(\cale\in\eexp\to\text{Env}\to V\) where \(\text{Env}=\iid\to V\), the
        domain of environments. We use \(\eta\) to range over \(\Env\)
* Problems


* References
<<bibliographystyle link>>
bibliographystyle:alpha

\bibliography{/Users/wu/notes/notes/references.bib}

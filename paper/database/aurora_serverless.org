#+title: Resource Management in Aurora Serverless

#+AUTHOR:
#+LATEX_HEADER: \input{/Users/wu/notes/preamble.tex}
#+EXPORT_FILE_NAME: ../../latex/papers/database/resource_management_aurora_serverless.tex
#+LATEX_HEADER: \graphicspath{{../../../paper/database/}}
#+OPTIONS: toc:nil
#+STARTUP: shrink
* Introduction and Motivation
        The key selling point of Aurora Serverless is that it largely relieves the customers of having to
        manage how the resource capacity of their DBs varies in response to dynamic workloads. Instead of
        choosing a particular instance size or configuration up front, customers only specify DB capacity in
        units called *Aurora Capacity Units* (ACUs)

        Generally speaking, customers that find Aurora Serverless appealing include:
        1. workloads with high temporal variability (either predictable with patterns like time-of-day effects
           or unpredictable)
        2. new applications with as-yet-unknown needs.


        Aspects:
        * *Capacity Bounds*
        * *Resource Over-subscription and Over-provisioning*: The number of vCPUs on a host may exceed the
          capacity of the physical CPUs they are mapped to for statistical multiplexing benefits. Similarly,
          memory capacity is oversubscribed in terms of the customer-specified max ACUs of the instances on a
          host.
        * *Dynamic instance packing via live migration*: if a host starts to become highly utilized ("hot"),
          instance(s) are moved away from it to create more  room.
        * *Scale up rate regualtion*
        * *Distributed reactive control*
* Background
** Challenges and a Key Design Principle
        1. how to define "heat" (i.e., resource usage features on which to base decision-making)? when to deem
           an instance "hot" (i.e., needing remedial actions)? when to deem a host hot? when to deem heat as
           having been remediated?
        2. on which host to place a new instance? how to carry out dynamic mapping of existing instances to
           hosts using live migration? and
        3. how to strike the right trade-off between utilization and scaling up rates?

        Questions of mechanism included:
        1. what is the right virtualization solution?
        2. what is needed within and outside the VM to seamlessly scale the DB engine?
** From ASv1 to ASv2
* Overview
        We will focus on resource management within a "fleet," a pool of hosts
        #+ATTR_LATEX: :width .8\textwidth :float nil
        #+NAME:
        #+CAPTION:
        [[../../images/papers/142.png]]

** Policies

*** Within a host

*** Fleet-wide

* Fleet-wide Resource Management

* Resource Management Within a Host

** Mechanisms

** Policies

*** Boundary Management

* Problems


* References
<<bibliographystyle link>>
bibliographystyle:alpha

\bibliography{/Users/wu/notes/notes/references.bib}

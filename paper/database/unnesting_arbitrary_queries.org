#+title: Unnesting Arbitrary Queries

#+AUTHOR: Thomas Neumann & Alfons Kemper
#+LATEX_HEADER: \input{/Users/wu/notes/preamble.tex}
#+EXPORT_FILE_NAME: ../../latex/papers/database/unnesting_arbitrary_queries.tex
#+LATEX_HEADER: \graphicspath{{../../../paper/database/}}
#+LATEX_HEADER: \definecolor{mintedbg}{rgb}{0.99,0.99,0.99}
#+LATEX_HEADER: \usepackage[cachedir=\detokenize{~/miscellaneous/trash}]{minted}
#+LATEX_HEADER: \setminted{breaklines,
#+LATEX_HEADER:   mathescape,
#+LATEX_HEADER:   bgcolor=mintedbg,
#+LATEX_HEADER:   fontsize=\footnotesize,
#+LATEX_HEADER:   frame=single,
#+LATEX_HEADER:   linenos}
#+OPTIONS: toc:nil
#+STARTUP: shrink
* Introduction
        #+CAPTION: Q1
        #+begin_src sql
select s.name, e.course
from   students s, exams e
where  s.id = e.sid and
       e.grade = (select min(e2.grade)
                  from exams e2
                  where s.id = e2.sid)
        #+end_src
        The query contains a *dependent join*, i.e., a nested loop join where the evaluation of the right hand
        side depends on the current value of the left-hand side. These joins are highly inefficient, and lead
        to quadratic execution time.

        A rewrite would look like this
        #+CAPTION: Q1'
        #+begin_src sql
select s.name, e.course
from   students s, exams e,
       (select e2.sid as id, min(e2.grade) as best
        from exams e2
        group by e2.sid) m
where  s.id = e.sid and m.id = s.id and
       e.grade = m.best
        #+end_src
        Here, the evaluation of the subquery no longer depends on the values of s, and thus regular joins can
        be used.

        Now consider another query, by 2015, no system can unnests it
        #+CAPTION: Q2
        #+begin_src sql
select s.name, e.course
from   students s, exams e
where  s.id = e.sid and
  (s.major = 'CS' or s.major = 'Games Eng') and
   e.grade >= (select avg(e2.grade) + 1
               from exams e2
               where s.id = e2.sid or
               (e2.curriculums = s.major and
                s.year > e2.date))
        #+end_src
* Preliminaries
        *(inner) join*:
        \begin{equation*}
        T_1\bowtie_p T_2:=\sigma_p(T_1\times T_2)
        \end{equation*}
        *dependent join*:
        \begin{equation*}
        T_1\lfbowtie_p T_2:=\{t_1\circ t_2\mid t_1\in T_1\wedge t_2\in T_2(t_1)\wedge p(t_1\circ t_2)\}
        \end{equation*}
        Here the right hand side is evaluated for every tuple of the left hand side. We denote the attributes
        produced by an expression \(T\) by \(\cala(T)\), and free variables occurring in an expression \(T\)
        by \(\calf(T)\). To evaluate dependent join, \(\calf(T_2)\subseteq \cala(T_1)\) must hold.

        Take Q1 as example (sort of). \(T_1\) is
        #+begin_src sql
select s.name, s.id from students
        #+end_src
        \(T_2\) is
        #+begin_src sql
select e.id, e.course
from exams e
where e.grade = (select min(e2.grade)
                 from exams e2
                 where X = e2.sid)
        #+end_src
        So \(T_1, T_2\) here are actually all functions

        We use *natural join* in the join predicate to simplify the notation. We assume that all relations
        occuring in a query will have unique attribute names, even if they reference the same physical table,
        thus \(A\bowtie B\equiv A\times B\). However, if we explicitly reference the same relation name twice,
        and call for the natural join, then the attribute columns with the same name are compared, and the
        duplicate columns are projected out. Consider, for example:
        \begin{equation*}
        (A\bowtie C)\bowtie_{p\wedge\text{natural join }C}(B\bowtie C)
        \end{equation*}

        Here, the top-most join checks both the predicate \(p\) and compares the columns of \(C\) that come
        from both sides (and eliminates one of the two copies of \(C\)'s columns)

        * *semi join*:
          \begin{equation*}
          T_1\ltimes T_2:=\{t_1\mid t_1\in T_1\wedge \exists t_2\in T_2:p(t_1\circ t_2)\}
          \end{equation*}
        * *anti semi join*:
          \begin{equation*}
          T_1\rhd_pT_2:=\{t_1\mid t_1\in T_1\wedge\not\exists t_2\in T_2:p(t_1\circ t_2)\}
          \end{equation*}
        * *left outer join*:
          \begin{equation*}
          T_1\leftouterjoin_pT_2:=(T_1\bowtie_pT_2)\cup\{t_1\circ_{a\in\cala(T_2)}(a:null)\mid
          t_1\in(T_1\rhd_pT_2)\}
          \end{equation*}
        * *full outer join*:
          \begin{equation*}
          T_1\fullouterjoin_p T_2:=(T_1\leftouterjoin_p T_2)\cup\{t_2\circ_{a\in\cala(T_1)}(a:null)\mid t_2\in(T_2\rhd_pT_1)\}
          \end{equation*}

        We define the dependent joins accordingly as \(\lftimes\), \(\rhd'\), \(\leftouterjoin'\), \(\fullouterjoin'\)

        *group by*:
        \begin{equation*}
        \Gamma_{A;a:f}(e):=\{x\circ(a:f(y))\mid x\in\Pi_A(e)\wedge y=\{z\mid z\in e\wedge\forall a\in A:x.a=z.a\}\}
        \end{equation*}
        It groups its input \(e\) by \(A\) and evaluates one aggregation function.
        \wu{I guess \(a\) is the attribute of \(\im f\)}

        *map*:
        \begin{equation*}
        \chi_{a:f}(e):=\{x\circ(a:f(x))\mid x\in e\}
        \end{equation*}

        We define the attribute comparison operator \(=_A\) as
        \begin{equation*}
        t_1=_At_2:=\forall_{a\in A}:t_1.a=t_2.a
        \end{equation*}
        It compares NULL values as equal

* Unnesting
        The algebraic representation of a query with correlated subqueries results in a dependent join

** Simple Unnesting
        Consider
        #+begin_src sql
select ...
from lineitem l1 ...
where exists (select *
              from lineitem l2
              where l2.l_orderkey = l1.l_orderkey)
...
        #+end_src
        This is translated into an algebra expression of the form
        \begin{equation*}
        l_1\lftimes(\sigma_{l_1.okey=l_2.okey}(l_2))
        \end{equation*}
        which is equivalent to
        \begin{equation*}
        l_1\ltimes_{l_1.okey=l_2.okey}(l_2)
        \end{equation*}


** General Unnesting
        First, we translate the dependent join into a “nicer” dependent join (i.e., one that is easier to
        manipulate), and second, we will push the new dependent join down into the query until we can
        transform it into a regular join.

        First,
        \begin{equation*}
        T_1\lfbowtie_pT_2\equiv T_1\bowtie_{p\wedge T_1=_{\cala(D)}D}(D\lfbowtie T_2)
        \end{equation*}
        where
        \begin{equation*}
        D:=\Pi_{\calf(T_2)\cap\cala(T_1)}(T_1)
        \end{equation*}

        In the original expression, we had to evaluate \(T_2\) for every tuple of \(T_1\). In the second
        expression, we first compute the domain \(D\) of all variables bindings, evaluate \(T_2\) only once
        for every distinct variable binding \wu{the result of \(\Pi\) is a set}, and then use a regular join to match the results to the original
        \(T_1\) value. If there are a lot of duplicates, this already greatly reduces the number of
        invocations of \(T_2\).

        Consider the query for determining the worst exam for every student:
        \begin{gather*}
        \sigma_{e.grade=m}((\text{student }s\bowtie_{s.id=e.id}\text{exams }e)\lfbowtie\\
        (\Gamma_{\emptyset;m:min(e2.grade)}(\sigma_{s.id=e2.sid}\text{exams }e2)))
        \end{gather*}
        #+LATEX: \wu{
        \((\text{student }s\bowtie_{s.id=e.id}\text{exams
        }e)\lfbowtie(\Gamma_{\emptyset;m:min(e2.grade)}(\sigma_{s.id=e2.sid}\text{exams }e2))\)
        In left side, each student has many exams and grades. Then in the right side, for each student, its
        worst grade is taken. Therefore it generates students + students grades + student worst grade. Then
        we need \(\sigma\) to filter out those unrelated grades.
        #+LATEX: }

        The equivalence rule allows to restrict the computation of the best grades to each student
        \begin{gather*}
        \dots(\Pi_{d.id,s.id}(\text{students }s\bowtie_{s.id=e.sid}\text{exams }e)\lfbowtie\\
        (\Gamma_{\emptyset;m:min(e2.grade)}(\sigma_{d.id=e2.sid}\text{exams }e2)))
        \end{gather*}
        #+LATEX: \wu{
        Here \(d.id:s.id\) means we replace \(s.id\) with \(d.id\).
        #+LATEX: }

        #+ATTR_LATEX: :width .8\textwidth :float nil
        #+NAME:
        #+CAPTION:
        [[../../images/papers/53.png]]

        Knowing that \(D\) contains no duplicates helps in moving the dependent join further down into the
        query. In the following, we will assume that any relation named \(D\) is duplicate free, and in the
        following equivalences we only consider dependent joins where the left hand side is a set.

        The untimate goal of our dependent join push-down is to reach a state where the right hand side no
        longer dependents on the left hand side, i.e.,
        \begin{equation*}
        D\lfbowtie T\equiv D\bowtie T\text{ if }\calf(T)\cap\cala(D)=\emptyset
        \end{equation*}

        For selections, a push-down is very simple:
        \begin{equation*}
        D\lfbowtie \sigma_p(T_2)\equiv\sigma_p(D\lfbowtie T_2)
        \end{equation*}
        We first push the dependent join down as far as possible, until it can either be eliminated completely
        due to substitution, or until it can be transformed into a regular join. Once all dependent joins have
        been eliminated we can use the regular techniques like selection push-down and join reordering to
        re-optimize the transformed query.

        \begin{equation*}
        D\lfbowtie(T_1\bowtie_pT_2)=
        \begin{cases}
        (D\lfbowtie T_1)\bowtie_pT_2&\calf(T_2)\cap\cala(D)=\emptyset\\
        T_1\bowtie_p(D\lfbowtie T_2)&\calf(T_1)\cap\cala(D)=\emptyset\\
        (D\lfbowtie T_1)\bowtie_{p\wedge\text{natural join }D}(D\lfbowtie T_2)&\text{otherwise}
        \end{cases}
        \end{equation*}
        If we pushed the dependent join to both sides we have to augment the join predicate s.t. both sides
        are matched on the \(D\) values.

        For /outer joins/ we always have to replicate the dependent join if the inner side depends on it, as
        otherwise we cannot keep track of unmatched tuples from the outer side.
        \begin{align*}
        &D\lfbowtie(T_1\scriptstyle\leftouterjoin_pT_2)\equiv
        \begin{cases}
        (D\lfbowtie T_1)\scriptstyle\leftouterjoin_pT_2&\calf(T_2)\cap\cala(D)=\emptyset\\
        (D\lfbowtie T_1)\scriptstyle\leftouterjoin_{p\wedge\text{natural join }D}(D\lfbowtie T_2)&\text{otherwise}\\
        \end{cases}\\
        &D\lfbowtie(T_1\scriptstyle\fullouterjoin_pT_2)\equiv(D\lfbowtie T_1)\scriptstyle\fullouterjoin_{p\wedge\text{natural join }D}(D\lfbowtie T_2)
        \end{align*}

        Similar for /semi join/ and /anti join/:
        \begin{align*}
        &D\lfbowtie(T_1\ltimes_pT_2)\equiv
        \begin{cases}
        (D\lfbowtie T_1)\ltimes_pT_2&\calf(T_2)\cap\cala(D)=\emptyset\\
        (D\lfbowtie T_1)\ltimes_{p\wedge\text{natural join }D}(D\lfbowtie T_2)&\text{otherwise}
        \end{cases}\\
        &D\lfbowtie(T_1\rhd_pT_2)\equiv
        \begin{cases}
        (D\lfbowtie T_1)\rhd_pT_2&\calf(T_2)\cap\cala(D)=\emptyset\\
        (D\lfbowtie T_1)\rhd_{p\wedge\text{natural join }D}(D\lfbowtie T_2)&\text{otherwise}
        \end{cases}
        \end{align*}
        /group by/
        \begin{equation*}
        D\lfbowtie(\Gamma_{A;a:f}(T))\equiv\Gamma_{A\cup\cala(D);a:f}(D\lfbowtie T)
        \end{equation*}
        /projection/
        \begin{equation*}
        D\lfbowtie(\Pi_A(T))\equiv\Pi_{A\cup\cala(D)}(D\lfbowtie T)
        \end{equation*}
        /set operation/
        \begin{align*}
        &D\lfbowtie(T_1\cup T_2)\equiv(D\lfbowtie T_1)\cup(D\lfbowtie T_2)\\
        &D\lfbowtie(T_1\cap T_2)\equiv(D\lfbowtie T_1)\cap(D\lfbowtie T_2)\\
        &D\lfbowtie(T_1\setminus T_2)\equiv(D\lfbowtie T_1)\setminus(D\lfbowtie T_2)
        \end{align*}


** Optimization of Example Query Q1
        #+ATTR_LATEX: :width .6\textwidth :float nil
        #+NAME: 2
        #+CAPTION: Original Query Q1
        [[../../images/papers/86.png]]

        #+ATTR_LATEX: :width .6\textwidth :float nil
        #+NAME: 3
        #+CAPTION: Query Q1, Transformation Step 1
        [[../../images/papers/87.png]]


        #+ATTR_LATEX: :width .6\textwidth :float nil
        #+NAME: 4
        #+CAPTION: Query Q1, Transformation Step 2
        [[../../images/papers/88.png]]

        #+ATTR_LATEX: :width .6\textwidth :float nil
        #+NAME: 5
        #+CAPTION: Query Q1, Transformation Step 3
        [[../../images/papers/89.png]]

        #+ATTR_LATEX: :width .6\textwidth :float nil
        #+NAME: 6
        #+CAPTION: Query Q1, Transformation Step 4
        [[../../images/papers/90.png]]

        #+ATTR_LATEX: :width .6\textwidth :float nil
        #+NAME: 6
        #+CAPTION: Query Q1, Transformation Step 5
        [[../../images/papers/91.png]]

        #+ATTR_LATEX: :width .6\textwidth :float nil
        #+NAME: 7
        #+CAPTION: Query Q1, Optional Transformation Step 6 (decoupling both sides)
        [[../../images/papers/92.png]]


** Optimization of Example Query Q2
        #+ATTR_LATEX: :width .6\textwidth :float nil
        #+NAME: 8
        #+CAPTION: Query Q2, Optimized From with Sideways Information Passing
        [[../../images/papers/93.png]]


** Anti-Join Example
        #+begin_src sql
select R.*
from   R
where  R.X = all (select S.Y
                  from S
                  where S.B = R.A)
        #+end_src

* Optimizations
        The general unnesting case however has to add the projection to compute the domain \(D\), and the join
        with D, which causes some extra costs.

        In general, we can eliminate \(D\), if we can substitute it with values that already exist in the
        subtree anyway. This is commonly the case with equi-joins, for example the query contains the
        expression \(D\bowtie_{D.a=R.b}R\), we can learn the possible values of \(D.a\) that can make it to
        the original dependent join by inspecting the values of \(R.b\). The emphasized part of the statement
        is important, of course \(D\) can contain values that do not exist in \(R\), but these will never find
        a join partner and will thus never reach the original dependent join. We can therefore ignore them.

        To decide about substitution we must first analyze the query tree to find equivalence classes that are
        induced by the join and filter conditions. For example a filter condition \(\sigma_{a=b}\) implies
        that \(a\) and \(b\) are in the same equivalence class. We know that in the final result \(a\) and
        \(b\) have the same value, we can thus substitute \(a\) with \(b\). Computing these equivalence is
        relatively straight forward. One potential cause for problems would be outer joins, which can cause
        \(a\) and \(b\) to not be equal in the example above, but as the top-most join on \(D\) is known to be
        NULL-rejecting this is not an issue here.

        After having identified the equivalence classes \(C\), we can decide about a possible substitution as
        shown below:
        \begin{equation*}
        D\lfbowtie T\subseteq\chi_{\cala(D):B}(T)\quad\text{ if }\quad
        \exists B\subseteq\cala(T):\cala(D)\equiv_CB
        \end{equation*}
        Thus, instead of joining with \(D\), we can extend \(T\) and compute the implied attribute value from
        \(D\) by using the equivalent attributes. Note that this only holds because \(D\) is a set.

* Problems


* References
<<bibliographystyle link>>
bibliographystyle:alpha

<<bibliography link>>
bibliography:/Users/wu/notes/references.bib
